{"ast":null,"code":"import _asyncToGenerator from \"/home/asite/TEMP/test files/train-seat-checker/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction TrainSeatAvailabilityComponent_div_7_li_4_li_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.…µ…µelementStart(0, \"li\", 12);\n    i0.…µ…µtext(1);\n    i0.…µ…µelementEnd();\n  }\n  if (rf & 2) {\n    const r_r5 = ctx.$implicit;\n    i0.…µ…µadvance(1);\n    i0.…µ…µtextInterpolate1(\" \", r_r5, \"\");\n  }\n}\nfunction TrainSeatAvailabilityComponent_div_7_li_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.…µ…µelementStart(0, \"li\", 9);\n    i0.…µ…µtext(1);\n    i0.…µ…µelementStart(2, \"ul\", 10);\n    i0.…µ…µtemplate(3, TrainSeatAvailabilityComponent_div_7_li_4_li_3_Template, 2, 1, \"li\", 11);\n    i0.…µ…µelementEnd()();\n  }\n  if (rf & 2) {\n    const s_r3 = ctx.$implicit;\n    i0.…µ…µadvance(1);\n    i0.…µ…µtextInterpolate1(\" \", s_r3.seatNumber, \": \");\n    i0.…µ…µadvance(2);\n    i0.…µ…µproperty(\"ngForOf\", s_r3.freeRoutes);\n  }\n}\nfunction TrainSeatAvailabilityComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.…µ…µelementStart(0, \"div\", 5)(1, \"span\", 6);\n    i0.…µ…µtext(2);\n    i0.…µ…µelementEnd();\n    i0.…µ…µelementStart(3, \"ul\", 7);\n    i0.…µ…µtemplate(4, TrainSeatAvailabilityComponent_div_7_li_4_Template, 4, 2, \"li\", 8);\n    i0.…µ…µelementEnd()();\n  }\n  if (rf & 2) {\n    const i_r1 = ctx.$implicit;\n    const ctx_r0 = i0.…µ…µnextContext();\n    i0.…µ…µadvance(2);\n    i0.…µ…µtextInterpolate(i_r1);\n    i0.…µ…µadvance(2);\n    i0.…µ…µproperty(\"ngForOf\", ctx_r0.seatList[i_r1]);\n  }\n}\nexport let TrainSeatAvailabilityComponent = /*#__PURE__*/(() => {\n  class TrainSeatAvailabilityComponent {\n    constructor(http) {\n      this.http = http;\n      this.coachLink = 'https://trainchart.in/api/train/html/22959/2025-06-08/';\n      this.seatLink = 'https://trainchart.in/api/train/html/22959/2025-06-08/D6:2S/';\n      this.date = new Date();\n      this.trainNumber = '';\n      this.route = '';\n      this.coachList = [];\n      this.seatList = {};\n      this.trainSearchXhr = false;\n      this.oldSearchText = '';\n      this.trainList = [];\n    }\n    ngOnInit() {}\n    searchTrain() {\n      if (this.trainNumber.length < 3 || this.trainList.findIndex(e => e.t.includes(this.trainNumber)) > -1 || this.oldSearchText == this.trainNumber) {\n        return;\n      }\n      this.oldSearchText = this.trainNumber;\n      const isString = isNaN(Number(this.trainNumber));\n      let q = '';\n      let url = 'https://trainchart.in/api/train/search/';\n      if (isString) {\n        url = url + '0/?q=' + this.trainNumber;\n      } else {\n        url = url + this.trainNumber + '/';\n      }\n      this.trainSearchXhr && this.trainSearchXhr?.unsubscribe();\n      this.trainSearchXhr = this.http.get(url).subscribe(res => {\n        // console.log(res);\n        this.trainList = res;\n      });\n    }\n    fetchData() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        console.log('Start');\n        _this.trainSearchXhr = true;\n        yield _this.fetchCoachData();\n        console.log(_this.coachList);\n        _this.coachList.forEach((e, i) => {\n          _this.fetchSeatData(e, i == _this.coachList.length - 1);\n        });\n        console.log('End');\n      })();\n    }\n    fetchCoachData() {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        console.log(_this2.date);\n        if (!_this2.trainNumber || !_this2.date) {\n          return;\n        }\n        const response = yield fetch(`https://trainchart.in/api/train/html/${_this2.trainNumber}/${_this2.date}/`);\n        const reader = response.body?.getReader();\n        const decoder = new TextDecoder();\n        let text = '';\n        const that = _this2; // ‚úÖ Fix: capture context manually\n        function read() {\n          return _read.apply(this, arguments);\n        }\n        function _read() {\n          _read = _asyncToGenerator(function* () {\n            const {\n              done,\n              value\n            } = yield reader.read();\n            if (value) {\n              text += decoder.decode(value, {\n                stream: true\n              });\n            }\n            if (done) {\n              console.log('Stream finished reading');\n              const parser = new DOMParser();\n              const doc = parser.parseFromString(text, 'text/html');\n              const listItems = doc.querySelectorAll('li');\n              const results = [];\n              listItems.forEach(li => {\n                const seatText = li.dataset;\n                if (seatText?.seat && seatText.seat !== 'UR' && seatText.seat !== 'SLRD') {\n                  results.push(`${seatText.seat}:${seatText.cls}`);\n                }\n              });\n              that.coachList = results; // ‚úÖ use `that` instead of `this`\n              console.log('Results set on component:', that.coachList);\n              return;\n            }\n            // Keep reading\n            yield read();\n          });\n          return _read.apply(this, arguments);\n        }\n        yield read(); // üîÅ Start reading\n      })();\n    }\n\n    fetchSeatData(coach, isLast) {\n      var _this3 = this;\n      return _asyncToGenerator(function* () {\n        const response = yield fetch(`https://trainchart.in/api/train/html/${_this3.trainNumber}/${_this3.date}/${coach}/`);\n        const reader = response.body?.getReader();\n        const decoder = new TextDecoder();\n        let text = '';\n        const that = _this3; // ‚úÖ Fix: capture context manually\n        let searchTerms = that.route.replace(/\\s+/g, '').toLowerCase().split(',');\n        function read() {\n          return _read2.apply(this, arguments);\n        }\n        function _read2() {\n          _read2 = _asyncToGenerator(function* () {\n            const {\n              done,\n              value\n            } = yield reader.read();\n            if (value) {\n              text += decoder.decode(value, {\n                stream: true\n              });\n            }\n            if (done) {\n              console.log('Stream finished reading');\n              const parser = new DOMParser();\n              const doc = parser.parseFromString(text, 'text/html');\n              const listItems = doc.querySelectorAll('li');\n              const results = [];\n              listItems.forEach(li => {\n                // Get the seat number (inside <span>), remove spaces\n                const seatText = li.querySelector('span')?.textContent.trim().replace(/\\s/g, '');\n                // Get the paragraph content (routes)\n                const routesText = li.querySelector('p')?.innerHTML || '';\n                // Extract \"Free\" routes by splitting with <br> and filtering\n                const freeRoutes = routesText.split('<br>').filter(route =>\n                // route.toLowerCase().includes('-Free') && route.includes(that.route) \n                searchTerms.every(item => route.toLowerCase().includes(item))).map(route => route.trim());\n                if (freeRoutes.length) {\n                  results.push({\n                    seatNumber: seatText,\n                    freeRoutes: freeRoutes // array of routes with 'Free'\n                  });\n                }\n              });\n\n              console.log('Seats: ', results);\n              that.seatList[coach] = results; // ‚úÖ use `that` instead of `this`\n              if (isLast) {\n                that.trainSearchXhr = false;\n              }\n              return;\n            }\n            // Keep reading\n            yield read();\n          });\n          return _read2.apply(this, arguments);\n        }\n        yield read(); // üîÅ Start reading\n      })();\n    }\n    static #_ = this.…µfac = function TrainSeatAvailabilityComponent_Factory(t) {\n      return new (t || TrainSeatAvailabilityComponent)(i0.…µ…µdirectiveInject(i1.HttpClient));\n    };\n    static #_2 = this.…µcmp = /*@__PURE__*/i0.…µ…µdefineComponent({\n      type: TrainSeatAvailabilityComponent,\n      selectors: [[\"app-train-seat-availability\"]],\n      decls: 8,\n      vars: 6,\n      consts: [[\"type\", \"number\", \"placeholder\", \"Train Number\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"text\", \"placeholder\", \"Route\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"date\", \"placeholder\", \"Pick Date\", 3, \"ngModel\", \"ngModelChange\"], [1, \"btn\", \"default-btn\", 3, \"click\"], [\"class\", \"coach-list\", 4, \"ngFor\", \"ngForOf\"], [1, \"coach-list\"], [1, \"coach-name\"], [1, \"seat-number\"], [\"class\", \"seat\", 4, \"ngFor\", \"ngForOf\"], [1, \"seat\"], [1, \"route-list\"], [\"class\", \"route\", 4, \"ngFor\", \"ngForOf\"], [1, \"route\"]],\n      template: function TrainSeatAvailabilityComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.…µ…µelementStart(0, \"div\")(1, \"input\", 0);\n          i0.…µ…µlistener(\"ngModelChange\", function TrainSeatAvailabilityComponent_Template_input_ngModelChange_1_listener($event) {\n            return ctx.trainNumber = $event;\n          });\n          i0.…µ…µelementEnd();\n          i0.…µ…µelementStart(2, \"input\", 1);\n          i0.…µ…µlistener(\"ngModelChange\", function TrainSeatAvailabilityComponent_Template_input_ngModelChange_2_listener($event) {\n            return ctx.route = $event;\n          });\n          i0.…µ…µelementEnd();\n          i0.…µ…µelementStart(3, \"input\", 2);\n          i0.…µ…µlistener(\"ngModelChange\", function TrainSeatAvailabilityComponent_Template_input_ngModelChange_3_listener($event) {\n            return ctx.date = $event;\n          });\n          i0.…µ…µelementEnd();\n          i0.…µ…µelementStart(4, \"button\", 3);\n          i0.…µ…µlistener(\"click\", function TrainSeatAvailabilityComponent_Template_button_click_4_listener() {\n            return ctx.fetchData();\n          });\n          i0.…µ…µtext(5, \" Fetch Data \");\n          i0.…µ…µelementEnd()();\n          i0.…µ…µelementStart(6, \"div\");\n          i0.…µ…µtemplate(7, TrainSeatAvailabilityComponent_div_7_Template, 5, 2, \"div\", 4);\n          i0.…µ…µelementEnd();\n        }\n        if (rf & 2) {\n          i0.…µ…µadvance(1);\n          i0.…µ…µproperty(\"ngModel\", ctx.trainNumber);\n          i0.…µ…µadvance(1);\n          i0.…µ…µproperty(\"ngModel\", ctx.route);\n          i0.…µ…µadvance(1);\n          i0.…µ…µproperty(\"ngModel\", ctx.date);\n          i0.…µ…µadvance(3);\n          i0.…µ…µclassProp(\"loader\", ctx.trainSearchXhr);\n          i0.…µ…µadvance(1);\n          i0.…µ…µproperty(\"ngForOf\", ctx.coachList);\n        }\n      },\n      dependencies: [i2.NgForOf, i3.DefaultValueAccessor, i3.NumberValueAccessor, i3.NgControlStatus, i3.NgModel],\n      styles: [\"li.seat[_ngcontent-%COMP%]{border-right:1px solid #909090;border-bottom:1px solid #909090;padding:5px 10px;font-weight:700;list-style-type:none}ul.route-list[_ngcontent-%COMP%]{font-weight:400}.seat-number[_ngcontent-%COMP%]{display:grid;grid-template-columns:repeat(auto-fit,minmax(150px,1fr));gap:16px}@media (max-width: 600px){.seat-number[_ngcontent-%COMP%]{grid-template-columns:repeat(auto-fit,minmax(120px,1fr))}}@media (max-width: 1024px){.seat-number[_ngcontent-%COMP%]{grid-template-columns:repeat(auto-fit,minmax(180px,1fr))}}.route[_ngcontent-%COMP%]{margin-top:5px}.coach-name[_ngcontent-%COMP%]{font-weight:700;font-size:25px;background:#ffdfe9;color:#0016ff;text-align:center;letter-spacing:7px;display:block}.coach-list[_ngcontent-%COMP%]{border-bottom:2px solid #929090}.loader[_ngcontent-%COMP%]:before{background:white;height:100%;position:fixed;text-align:center;width:100%;content:\\\"loading...\\\"}\"]\n    });\n  }\n  return TrainSeatAvailabilityComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}